{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2021-08-10T07:45:04.771Z",
    "end": "2021-08-10T07:45:54.294Z",
    "duration": 49523,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1a3177ce-5870-4bdd-a3df-e82d0ed974c4",
      "title": "",
      "fullFile": "cypress/integration/080_operationnoteevent_spec.js",
      "file": "cypress/integration/080_operationnoteevent_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "478524c1-093a-45f8-8402-ad8ef87ad2cb",
          "title": "080_Operation Note Event",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "080.1_Check_Add_Event_Button_And_Click",
              "fullTitle": "080_Operation Note Event 080.1_Check_Add_Event_Button_And_Click",
              "timedOut": null,
              "duration": 20022,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Check and click the Add Event button\ncy.get(\"#add-event\").should('be.visible').click();",
              "err": {},
              "uuid": "781c7701-a867-4f73-a7c7-1c509c613005",
              "parentUUID": "478524c1-093a-45f8-8402-ad8ef87ad2cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "080.2_Check_Add_Operation Note_Link_And_Click",
              "fullTitle": "080_Operation Note Event 080.2_Check_Add_Operation Note_Link_And_Click",
              "timedOut": null,
              "duration": 2972,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Check and click the Add Operation Note Event link\ncy.get(\"#OphTrOperationnote-link\").should('be.visible').click();",
              "err": {},
              "uuid": "3f4f2e74-0208-4462-b0d0-7228972d900b",
              "parentUUID": "478524c1-093a-45f8-8402-ad8ef87ad2cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "080.3_Check_Add_Operation_Note_Page_Loaded_Successfully",
              "fullTitle": "080_Operation Note Event 080.3_Check_Add_Operation_Note_Page_Loaded_Successfully",
              "timedOut": null,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Check that the Operation Note Event page is loaded successfully, by verifying the page-headers\ncy.fixture(\"operationnote.json\").then(operationnote => {\n  cy.get('.event-title').should('contain', operationnote.Select_booking_note);\n  cy.get('.element-title').should('contain', operationnote.Create_operation_note_header);\n});",
              "err": {},
              "uuid": "7b870a2b-1d79-463c-a631-b97fbf8c9492",
              "parentUUID": "478524c1-093a-45f8-8402-ad8ef87ad2cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "080.4_Select An Operation Booking",
              "fullTitle": "080_Operation Note Event 080.4_Select An Operation Booking",
              "timedOut": null,
              "duration": 26338,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//Read from/under the body tag\ncy.get('body').then($body => {\n  //If there is no Opeation Booking, then do nothing\n  if ($body.find('.booking-select').length <= 1) {} else {\n    //If there is an Opeation Booking, then do the following\n    //Check the first Opeation Booking in the stack, and click it\n    cy.get(\".booking-select\").eq(0).should('be.visible').click(); //Check that the Create Operation Note page is loaded successfully, by verifying the page-header\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get('.event-title').should('contain', operationnote.Operation_note_header);\n    });\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      //Check for the Theatre control and supply value from operationnote json file\n      cy.get(\"#Element_OphTrOperationnote_SiteTheatre_theatre_id\").should('be.visible').select(operationnote.Theatre); //Check for the Surgeon control and supply value from operationnote json file\n      cy.get(\"#Element_OphTrOperationnote_Surgeon_surgeon_id\").should('be.visible').select(operationnote.Surgeon);\n    }); //Wait for 3 seconds\n    cy.wait(3000); //Check for the Cataract doodles (small images) and pick one, as mentioned in the operationnote json file\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get(\".ed2-toolbar-panel.ed2-main-toolbar\").should('be.visible').contains(operationnote.Cataract).parent().click();\n    }); //Wait for 3 seconds\n    cy.wait(3000); //Check for the IOL-type control and pick one, as mentioned in the operationnote json file\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get(\"#Element_OphTrOperationnote_Cataract_iol_type_id\").should('be.visible').select(operationnote.IOL_type);\n    });\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      //Check for the IOL-power control and pick one, as mentioned in the operationnote json file\n      cy.get(\"#Element_OphTrOperationnote_Cataract_iol_power\").should('be.visible').clear().type(operationnote.IOL_power); //Check for the predicted-refraction control and pick one, as mentioned in the operationnote json file\n      cy.get(\"#Element_OphTrOperationnote_Cataract_predicted_refraction\").should('be.visible').clear().type(operationnote.Predicted_refraction); //Check for the Complications control and pick one, as mentioned in the operationnote json file\n      cy.get(\"#OphTrOperationnote_CataractComplications\").should('be.visible').select(operationnote.Complications);\n    }); //Check that the PCR Risk exists and has some value\n    cy.get(\"#right_eye_pcr > .data-group-pad-top > #pcr-risk-div\").should('be.visible').should('contain', \"PCR Risk\"); //-----Code for Anaesthetic Type starts here-----\n    //Note - The POC is done only with the Anaesthetic Type as LA, as per the requirement\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      //Get the value of Anaesthetic_Type, as mentioned in the operationnote json file\n      const cntAnaesthetic_Type = operationnote.Anaesthetic_Type; //For the Anaesthetic Type as LA\n      if (cntAnaesthetic_Type == \"LA\") {\n        //Get the current state of the LA checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__LA\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__LA\").should('be.visible').click();\n          }\n        });\n      } //For the Anaesthetic Type as Sedation\n\n      if (cntAnaesthetic_Type == \"Sedation\") {\n        //Get the current state of the Sedation checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__Sedation\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__Sedation\").should('be.visible').click();\n          }\n        });\n      } //For the Anaesthetic Type as GA\n\n      if (cntAnaesthetic_Type == \"GA\") {\n        //Get the current state of the GA checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__GA\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__GA\").should('be.visible').click();\n          }\n        });\n      } //For the Anaesthetic Type as No Anaesthetic\n\n      if (cntAnaesthetic_Type == \"No Anaesthetic\") {\n        //Get the current state of the No Anaesthetic checkbox\n        cy.get(\"input.NoAnaesthetic\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\".NoAnaesthetic\").should('be.visible').click();\n          }\n        });\n      }\n    }); //-----Code for Anaesthetic Type ends here-----\n    //-----Code for Anaesthetic LA Delivery Methods by starts here-----\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      //Get the value of Anaesthetic_LA_Delivery_Methods, as mentioned in the operationnote json file\n      const cntAnaesthetic_LA_Delivery_Methods = operationnote.Anaesthetic_LA_Delivery_Methods; //For the Anaesthetic LA Delivery Methods as Subtenons\n      if (cntAnaesthetic_LA_Delivery_Methods == \"Subtenons\") {\n        //Get the current state of the LA checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__Subtenons\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__Subtenons\").should('be.visible').click();\n          }\n        });\n      } //For the Anaesthetic LA Delivery Methods as Peribulbar\n\n      if (cntAnaesthetic_LA_Delivery_Methods == \"Peribulbar\") {\n        //Get the current state of the Sedation checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__Peribulbar\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__Peribulbar\").should('be.visible').click();\n          }\n        });\n      } //For the Anaesthetic LA Delivery Methods as Retrobulbar\n\n      if (cntAnaesthetic_LA_Delivery_Methods == \"Retrobulbar\") {\n        //Get the current state of the GA checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__Retrobulbar\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__Retrobulbar\").should('be.visible').click();\n          }\n        });\n      } //For the Anaesthetic LA Delivery Methods as Subconjunctival\n\n      if (cntAnaesthetic_LA_Delivery_Methods == \"Subconjunctival\") {\n        //Get the current state of the No Anaesthetic checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__Subconjunctival\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__Subconjunctival\").should('be.visible').click();\n          }\n        });\n      } //For the Anaesthetic LA Delivery Methods as Topical\n\n      if (cntAnaesthetic_LA_Delivery_Methods == \"Topical\") {\n        //Get the current state of the Sedation checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__Topical\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__Topical\").should('be.visible').click();\n          }\n        });\n      } //For the Anaesthetic LA Delivery Methods as Topical and intracameral\n\n      if (cntAnaesthetic_LA_Delivery_Methods == \"Topical and intracameral\") {\n        //Get the current state of the GA checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__Topical and intracameral\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__Topical and intracameral\").should('be.visible').click();\n          }\n        });\n      } //For the Anaesthetic LA Delivery Methods as No Other\n\n      if (cntAnaesthetic_LA_Delivery_Methods == \"Other\") {\n        //Get the current state of the No Anaesthetic checkbox\n        cy.get(\"input#Element_OphTrOperationnote_Anaesthetic__Other\").then($checkbox => {\n          const isChecked = Boolean($checkbox.prop('checked')); //console.log(`Initial checkbox: **${initial}**`) //to print the state of the checkbox\n          //If the checkbox is already check, then do nothing. Otherwise, check the checkbox\n          if (isChecked) {} else {\n            cy.get(\"#Element_OphTrOperationnote_Anaesthetic__Other\").should('be.visible').click();\n          }\n        });\n      }\n    }); //-----Code for Anaesthetic LA Delivery Methods by ends here-----\n    //-----Code for Anaesthetic Given by starts here-----\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      //Get the value of Anaesthetic_Given_by, as mentioned in the operationnote json file\n      const cntAnaesthetic_Given_by = operationnote.Anaesthetic_Given_by;\n      if (cntAnaesthetic_Given_by == \"Anaesthetist\") {\n        cy.get(\"#Element_OphTrOperationnote_Anaesthetic_anaesthetist_id_1\").should('be.visible').click();\n      }\n      if (cntAnaesthetic_Given_by == \"Surgeon\") {\n        cy.get(\"#Element_OphTrOperationnote_Anaesthetic_anaesthetist_id_2\").should('be.visible').click();\n      }\n      if (cntAnaesthetic_Given_by == \"Nurse\") {\n        cy.get(\"#Element_OphTrOperationnote_Anaesthetic_anaesthetist_id_3\").should('be.visible').click();\n      }\n      if (cntAnaesthetic_Given_by == \"Anaesthetic technician\") {\n        cy.get(\"#Element_OphTrOperationnote_Anaesthetic_anaesthetist_id_4\").should('be.visible').click();\n      }\n      if (cntAnaesthetic_Given_by == \"Other\") {\n        cy.get(\"#Element_OphTrOperationnote_Anaesthetic_anaesthetist_id_5\").should('be.visible').click();\n      }\n    }); //-----Code for Anaesthetic Given by ends here-----\n    //Check and click the Save button\n    cy.get(\"#et_save_footer\").should('be.visible').click(); //Check that the save actually happens and next page is loaded successfully, by verifying the page-header\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get('#flash-success').should('be.visible').should('contain', operationnote.Operation_note_created_header);\n    }); //Verify the value of Surgeon\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get('#js-listview-info-pro > .dot-list > :nth-child(1)').should('be.visible').should('contain', operationnote.Surgeon);\n    }); //Verify the value of IOL type\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get(':nth-child(6) > :nth-child(2) > .data-value').should('be.visible').should('contain', operationnote.IOL_type);\n    }); //Verify the value of IOL power\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get(':nth-child(7) > :nth-child(2) > .data-value').should('be.visible').should('contain', operationnote.IOL_power);\n    }); //Verify the value of predicted-refraction\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get(':nth-child(8) > :nth-child(2) > .data-value').should('be.visible').should('contain', operationnote.Predicted_refraction);\n    }); //Scroll to Complications element\n    cy.get(\".view-cataract-complications > .element-data > .data-value > .tile-data-overflow > .large > tbody > tr > td\").scrollIntoView().should('be.visible'); //Verify the value of Complications\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get(\".view-cataract-complications > .element-data > .data-value > .tile-data-overflow > .large > tbody > tr > td\").should('be.visible').should('contain', operationnote.Complications);\n    }); //Scroll to Anaesthetic Type element\n    cy.get(\"#js-listview-anaesthetic-pro > .dot-list > :nth-child(1)\").scrollIntoView().should('be.visible'); //Verify the value of Anaesthetic Type\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get('#js-listview-anaesthetic-pro > .dot-list > :nth-child(1)').should('be.visible').should('contain', operationnote.Anaesthetic_Type);\n    }); //Verify the value of Anaesthetic LA Delivery Methods\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get('#js-listview-anaesthetic-pro > .dot-list > :nth-child(2)').should('be.visible').should('contain', operationnote.Anaesthetic_LA_Delivery_Methods);\n    }); //Verify the value of Anaesthetic Given by\n    cy.fixture(\"operationnote.json\").then(operationnote => {\n      cy.get('.dot-list > :nth-child(4)').should('be.visible').should('contain', operationnote.Anaesthetic_Given_by);\n    });\n  }\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: expected '<li>' to contain 'Stevens Simon'",
                "estack": "AssertionError: Timed out retrying after 4000ms: expected '<li>' to contain 'Stevens Simon'\n    at Context.eval (https://develop-test.meh.toukan.co/__cypress/tests?p=cypress\\integration\\080_operationnoteevent_spec.js:359:92)",
                "diff": null
              },
              "uuid": "39a6ffed-c9a6-4d06-b0f7-21d86fe31e32",
              "parentUUID": "478524c1-093a-45f8-8402-ad8ef87ad2cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "781c7701-a867-4f73-a7c7-1c509c613005",
            "3f4f2e74-0208-4462-b0d0-7228972d900b",
            "7b870a2b-1d79-463c-a631-b97fbf8c9492"
          ],
          "failures": [
            "39a6ffed-c9a6-4d06-b0f7-21d86fe31e32"
          ],
          "pending": [],
          "skipped": [],
          "duration": 49364,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.2.0"
    }
  }
}